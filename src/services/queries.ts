export const getIdByNameQuery = "query GetSuggestedTitles( $country: Country! $language: Language! $first: Int! $filter: TitleFilter ) { popularTitles(country: $country, first: $first, filter: $filter) { edges { node { ...SuggestedTitle __typename } __typename } __typename } } fragment SuggestedTitle on MovieOrShow { id objectType objectId content(country: $country, language: $language) { fullPath title originalReleaseYear posterUrl fullPath __typename } __typename }";

export const getDataByIdQuery = `query GetTitleOffers($nodeId: ID! $country: Country! $language: Language! $filterFlatrate: OfferFilter! $filterBuy: OfferFilter! $filterRent: OfferFilter! $filterFree: OfferFilter! $platform: Platform! = WEB) { node(id: $nodeId) { ... on MovieOrShowOrSeasonOrEpisode {     offerCount(country: $country, platform: $platform) flatrate: offers(     country: $country     platform: $platform     filter: $filterFlatrate     ) {     ...TitleOffer     __typename     }     buy: offers(country: $country, platform: $platform, filter: $filterBuy) {     ...TitleOffer     __typename     }     rent: offers(     country: $country     platform: $platform     filter: $filterRent     ) {     ...TitleOffer     __typename     }     free: offers(     country: $country     platform: $platform     filter: $filterFree     ) {     ...TitleOffer     __typename     }     __typename } __typename } } fragment TitleOffer on Offer { id presentationType monetizationType retailPrice(language: $language) retailPriceValue currency lastChangeRetailPriceValue type package { packageId clearName __typename } standardWebURL elementCount availableTo deeplinkRoku: deeplinkURL(platform: ROKU_OS) __typename }`;